//Variaveis podem ser declaradas de 3 formas:
/* VAR, LET e CONST
VAR: No geral evite o seu uso, pode n√£o ser muito seguro.
LET: Utilize quando for necess√°rio reatribuir o valor da vari√°vel.
CONST: N√£o √© poss√≠vel reatribuir o valor da vari√°vel uma vez que j√° tenha sido atribuido um valor. Utilize quando n√£o precisar reatribuir o valor da vari√°vel.
*/
//let cidade = "Registro"
//let cidade = "Jacupiranga" //n√£o pode, erro
//const idade //n√£o pode, falta atribui√ß√£o
//const idade = 19
//idade = 20 // n√£o pode, n√£o vai mudar uma constante

//Tipos de Fun√ß√µes

//Fun√ß√£o Simples (de escrever na p√°gina)
const message = "<h2>Ola! Bem-Vindo! Essa √© sua primeira fun√ß√£o!</h2>";
function showMessage() {
  document.write(message);
}
//Invocando(üò±) a fun√ß√£o
showMessage();

//Fun√ß√£o com Par√¢metros
const user = "Yuri P";
function userMessage(user) {
  // Essa fun√ß√£o recebe um par√¢metro(entre par√™nteses)
  document.write(`<h3>O que deseja fazer hoje, ${user} ?</h3>`);
  /*${} -> Template Strings / Literal Strings (Use crase pra funcionar)
    √â usado para inserir vari√°veis dentro de STRINGS (aspas)
    */
}
userMessage(user); // Argumento

//Fun√ß√£o com mais de um par√¢metro
const n1 = 10;
const n2 = 12;

function mult(n1, n2) {
  //Essa fun√ß√£o recebe dois par√¢metros
  let result = n1 * n2;
  document.write(`A multiplica√ß√£o de ${n1} e ${n2} √© igual a ${result}`);
}
mult(n1, n2);

//Fun√ß√£o com retorno
const num1 = 1000;
const num2 = 5;

function div(num1, num2) {
  return num1 / num2;
}
document.write(
  `<p>A divis√£o de ${num1} por ${num2} √© igual a ${div(num1, num2)}.</p>`
);

//Fun√ß√£o com diferentes retornos
const number = 4;

function parImpar(number) {
  if (number % 2 == 0) {
    return "par";
  } else {
    return "impar";
  }
}
document.write(`<p>O n√∫mero ${number} √© <strong>${parImpar(number)}</strong>.</p>`)